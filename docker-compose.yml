version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3

  # Booking Service Database
  booking-db:
    image: postgres:15-alpine
    container_name: booking-db
    environment:
      POSTGRES_USER: booking
      POSTGRES_PASSWORD: booking123
      POSTGRES_DB: booking
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - booking_db_data:/var/lib/postgresql/data

  # Inventory Service Database
  inventory-db:
    image: postgres:15-alpine
    container_name: inventory-db
    environment:
      POSTGRES_USER: inventory
      POSTGRES_PASSWORD: inventory123
      POSTGRES_DB: inventory
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - inventory_db_data:/var/lib/postgresql/data

  # Notification Service Database
  notification-db:
    image: postgres:15-alpine
    container_name: notification-db
    environment:
      POSTGRES_USER: notification
      POSTGRES_PASSWORD: notification123
      POSTGRES_DB: notification
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - notification_db_data:/var/lib/postgresql/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-init
    depends_on:
      - kafka
    volumes:
      - ./init-kafka-topics.sh:/init-kafka-topics.sh
    command: ["sh", "/init-kafka-topics.sh"]

  # Microservices
  booking-service:
    build:
      context: ./booking
      dockerfile: Dockerfile
    container_name: booking-service
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - booking-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://booking-db:5432/booking
      SPRING_DATASOURCE_USERNAME: booking
      SPRING_DATASOURCE_PASSWORD: booking123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  inventory-service:
    build:
      context: ./inventory
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8081:8081"
    depends_on:
      - kafka
      - inventory-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-db:5432/inventory
      SPRING_DATASOURCE_USERNAME: inventory
      SPRING_DATASOURCE_PASSWORD: inventory123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8082:8082"
    depends_on:
      - kafka
      - notification-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://notification-db:5432/notification
      SPRING_DATASOURCE_USERNAME: notification
      SPRING_DATASOURCE_PASSWORD: notification123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  booking_db_data:
  inventory_db_data:
  notification_db_data: